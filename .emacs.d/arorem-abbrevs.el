(define-abbrev-table 'arorem-abbrev-table
  '(;; model
    ("bt" "" (lambda () (snippet-insert "belongs_to")))
    ("hm" "" (lambda () (snippet-insert "has_many")))
    ("ho" "" (lambda () (snippet-insert "has_one")))
    ;; controller renders
    ("ra" "" (lambda () (snippet-insert "render :action => \"$${action}\"")))
    ("ral" "" (lambda () (snippet-insert "render :action => \"$${action}\", :layout => \"$${layoutname}\"")))
    ("rf" "" (lambda () (snippet-insert "render :file => \"$${filepath}\"")))
    ("rfu" "" (lambda () (snippet-insert "render :file => \"$${filepath}\", :use_full_path => $${false}")))
    ("ri" "" (lambda () (snippet-insert "render :inline => \"$${<%= 'hello' %>}\"")))
    ("ril" "" (lambda () (snippet-insert "render :inline => \"$${<%= 'hello' %>}\", :locals => { $${name} => \"$${value}\" }")))
    ("rit" "" (lambda () (snippet-insert "render :inline => \"$${<%= 'hello' %>}\", :type => :$${rxml})")))
    ("rl" "" (lambda () (snippet-insert "render :layout => \"$${layoutname}\"")))
    ("rn" "" (lambda () (snippet-insert "render :nothing => $${true}")))
    ("rns" "" (lambda () (snippet-insert "render :nothing => $${true}, :status => $${401}")))
    ("rp" "" (lambda () (snippet-insert "render :partial => \"$${item}\"")))
    ("rpc" "" (lambda () (snippet-insert "render :partial => \"$${item}\", :collection => $${items}")))
    ("rpl" "" (lambda () (snippet-insert "render :partial => \"$${item}\", :locals => { :$${name} => \"$${value}\"}")))
    ("rpo" "" (lambda () (snippet-insert "render :partial => \"$${item}\", :object => $${object}")))
    ("rps" "" (lambda () (snippet-insert "render :partial => \"$${item}\", :status => $${500}")))
    ("rt" "" (lambda () (snippet-insert "render :text => \"$${Text here...}\"")))
    ("rtl" "" (lambda () (snippet-insert "render :text => \"$${Text here...}\", :layout => \"$${layoutname}\"")))
    ("rtlt" "" (lambda () (snippet-insert "render :text => \"$${Text here...}\", :layout => $${true}")))
    ("rts" "" (lambda () (snippet-insert "render :text => \"$${Text here...}\", :status => $${401}")))
    ("rcea" "" (lambda () (snippet-insert "render_component :action => \"$${index}\"")))
    ("rcec" "" (lambda () (snippet-insert "render_component :controller => \"$${items}\"")))
    ("rceca" "" (lambda () (snippet-insert "render_component :controller => \"$${items}\", :action => \"$${index}\"")))
    ;; redirects
    ("rea" "" (lambda () (snippet-insert "redirect_to :action => \"$${index}\"")))
    ("reai" "" (lambda () (snippet-insert "redirect_to :action => \"$${show}\", :id => $${@item}")))
    ("rec" "" (lambda () (snippet-insert "redirect_to :controller => \"$${items}\"")))
    ("reca" "" (lambda () (snippet-insert "redirect_to :controller => \"$${items}\", :action => \"$${list}\"")))
    ("recai" "" (lambda () (snippet-insert "redirect_to :controller => \"$${items}\", :action => \"$${show}\", :id => $${@item}")))
    ;; assertions
    ("ae" "" (lambda () (snippet-insert "assert_equal $${expected}, $${actual}")))
    ("ann" "" (lambda () (snippet-insert "assert_not_nil $${object}")))
    ("ako" "" (lambda () (snippet-insert "assert_kind_of $${class}, $${object}")))
    ("are" "" (lambda () (snippet-insert "assert_response :$${success}")))
    ("ar" "" (lambda () (snippet-insert "assert_raises $${Exception} { $. }")))
    ("art" "" (lambda () (snippet-insert "assert_redirected_to :controller => \"$${controller}\"")))
    ;; validations
    ("va" "" (lambda () (snippet-insert "validates_associated :$${attr}")))
    ("vc" "" (lambda () (snippet-insert "validates_confirmation_of :$${attr}")))
    ("ve" "" (lambda () (snippet-insert "validates_exclusion_of :$${attr}")))
    ("vp" "" (lambda () (snippet-insert "validates_presence_of :$${attr}")))
    ("vu" "" (lambda () (snippet-insert "validates_uniqueness_of :$${attr}")))
    ("vn" "" (lambda () (snippet-insert "validates_numericality_of :$${attr}")))
    ("vf" "" (lambda () (snippet-insert "validates_format_of :$${attr}, :with => /$${regex}/")))
    ;; misc
    ("flash" "" (lambda () (snippet-insert "flash[:$${notice}] = \"$${Text here...}\"")))
    ("logi" "" (lambda () (snippet-insert "logger.info \"$${Text here...}\"")))
    ("par" "" (lambda () (snippet-insert "params[:$${id}]")))
    ("ses" "" (lambda () (snippet-insert "session[:$${user}]")))))

(define-abbrev-table 'arorem-rhtml-abbrev-table
  '(;; view
    ("ft" "" (lambda () (snippet-insert "<%= form_tag :action => \"$${update}\" %>\n$.\n<%= end_form_tag %>")))
    ("lia" "" (lambda () (snippet-insert "<%= link_to \"$${title}\", :action => \"$${index}\" %>")))
    ("liai" "" (lambda () (snippet-insert "<%= link_to \"$${title}\", :action => \"$${edit}\", :id => $${@item} %>")))
    ("lic" "" (lambda () (snippet-insert "<%= link_to \"$${title}\", :controller => \"$${items}\" %>")))
    ("lica" "" (lambda () (snippet-insert "<%= link_to \"$${title}\", :controller => \"$${items}\", :action => \"$${index}\" %>")))
    ("licai" "" (lambda () (snippet-insert "<%= link_to \"$${title}\", :controller => \"$${items}\", :action => \"$${edit}\", :id => $${@item} %>")))
    ("h" "" (lambda () (snippet-insert "<% h $${@item} %>")))
    ("if" "" (lambda () (snippet-insert "<% if $${cond} -%>\n$.\n<% end -%>")))
    ("ifel" "" (lambda () (snippet-insert "<% if $${cond} -%>\n$.\n<% else -%>\n<% end -%>")))
    ("unless" "" (lambda () (snippet-insert "<% unless $${cond} -%>\n$.\n<% end -%>")))
    ("%" "" (lambda () (snippet-insert "<% $. -%>")))
    ("%%" "" (lambda () (snippet-insert "<%= $. %>")))))